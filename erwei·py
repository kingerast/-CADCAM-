import turtle as t
import numpy


class erwei:
    """定义图形的类"""

    def __init__(self):
        self.number = 0  # 顶点个数
        self.Matrix = []  # 输入坐标矩阵
        self.Matrix_proce = []  # 齐次坐标矩阵
        self.parameter = []  # 变换参数
        self.trans_matrix = numpy.array([[1, 0, 0],
                                         [0, 1, 0],
                                         [0, 0, 1]])  # 总变换矩阵
        self.matrix_x = []  # 变换矩阵
        self.matrix_finall = []  # 最终矩阵

    def run_code(self):
        """运行主程序"""
        self._enter_point()
        self._data_process()
        # self.huatu(self.Matrix_proce)
        self._mode_select()
        print(f"变换矩阵为\n{self.trans_matrix}")
        self.matrix_finall = numpy.dot(self.Matrix_proce, self.trans_matrix)
        print(f"变换后的矩阵为\n{self.matrix_finall}")
        self.huatu(self.matrix_finall)

    def _enter_point(self):
        """输入矩阵坐标"""
        self.order = 0
        self.number = input("请输入坐标的个数\n")
        self.number = eval(self.number)
        self.output_x = "[x,y]"
        print(f"请按次序输入各点坐标,输入格式如下\n{self.output_x}")
        while self.order < self.number:
            # 依次输入各点坐标
            self.order += 1
            self.point = input(f"请输入第{self.order}个点的坐标\n")
            self.Matrix.append(eval(self.point))
        print("输入完毕")

    def _data_process(self):
        """处理Matrix_proce矩阵"""
        # 复制
        self.Matrix_proce = self.Matrix[:]
        for Matrix_point in self.Matrix_proce:
            Matrix_point.append(1)
        self.Matrix_proce = numpy.array(self.Matrix_proce)

    def _mode_select(self):
        """图形变换方式选择"""
        while True:
            print("请选择图形变换模式\n比例变换请输入'1'，对称变换请输入'2'，平移变换请输入'3'，结束输入请输入'4'")
            num_x = eval(input())
            if num_x == 1:
                self.grap_enlarge()
            elif num_x == 2:
                self.grap_symmetry()
            elif num_x == 3:
                self.grap_move()
            elif num_x == 4:
                break
            else:
                print("错误输入")
                continue

    def grap_enlarge(self):
        """比例变换"""
        print("请输入x和y方向上的比例因子，格式如下")
        self.parameter = eval(input("[x,y]\n"))
        self.matrix_x = numpy.array([[self.parameter[0], 0, 0],
                                     [0, self.parameter[1], 0],
                                     [0, 0, 1]])
        self.trans_matrix = numpy.dot(self.trans_matrix, self.matrix_x)

    def grap_symmetry(self):
        self.parameter = eval(input("x轴对称输入‘1’，y轴对称输入‘2’，原点对称输入‘0’\n"))
        if self.parameter == 0:
            self.matrix_x = numpy.array([[-1, 0, 0],
                                         [0, -1, 0],
                                         [0, 0, 1]])
        elif self.parameter == 1:
            self.matrix_x = numpy.array([[1, 0, 0],
                                         [0, -1, 0],
                                         [0, 0, 1]])
        elif self.parameter == 2:
            self.matrix_x = numpy.array([[-1, 0, 0],
                                         [0, 1, 0],
                                         [0, 0, 1]])
        self.trans_matrix = numpy.dot(self.trans_matrix, self.matrix_x)

    def grap_move(self):
        """平移变换"""
        print("请输入x和y方向上的平移量，格式如下")
        self.parameter = eval(input("[x,y]\n"))
        self.matrix_x = numpy.array([[1, 0, 0],
                                     [0, 1, 0],
                                     [self.parameter[0], self.parameter[1], 1]])
        self.trans_matrix = numpy.dot(self.trans_matrix, self.matrix_x)

    def zuobiao(self):
        """绘制坐标"""
        t.speed(0)
        t.pensize(2)

        # 画x轴
        t.penup()
        t.goto(-300, 0)
        t.pendown()
        t.goto(300, 0)
        # 画x轴的箭头
        t.penup()
        t.goto(295, 5)
        t.pendown()
        t.goto(300, 0)
        t.goto(295, -5)
        # 画x轴的点
        for i in range(-250, 300, 50):
            # 画点
            t.penup()
            t.goto(i, 10)
            t.pendown()
            t.goto(i, 0)
            # 画字
            t.penup()
            if i == 0:  # 对0的处理
                t.goto(i - 10, -25)
                t.write(i, align='center')
            else:
                t.goto(i, -25)
                t.write(i, align='center')
            t.pendown()
        # 画x轴的X
        t.penup()
        t.goto(290, -30)
        t.pendown()
        t.write('x', font=("Arial", 16))

        # 画y轴
        t.penup()
        t.goto(0, -300)
        t.pendown()
        t.goto(0, 300)
        # 画y轴的箭头
        t.penup()
        t.goto(-5, 295)
        t.pendown()
        t.goto(0, 300)
        t.goto(5, 295)

        # 画y轴的点
        for i in range(-250, 300, 50):
            # 画点
            t.penup()
            t.goto(10, i)
            t.pendown()
            t.goto(0, i)
            # 画字
            t.penup()
            if i == 0:  # 对0的处理
                pass
            else:
                t.goto(-25, i - 5)
                t.write(i, align='center')
            t.pendown()
        # 画y轴的y
        t.penup()
        t.goto(-30, 280)
        t.pendown()
        t.write('y', font=("Arial", 16))

        # 恢复初始位置
        t.penup()
        t.goto(0, 0)
        t.pendown()
        t.pensize(1)



    def _grap_display(self, matrix_proce):
        """画图函数"""
        t.pensize(2)
        t.pendown()
        t.goto(matrix_proce[0], matrix_proce[1])
        t.penup()

    def huatu(self, a):
        self.zuobiao()
        t.penup()
        t.goto(a[0][0], a[0][1])
        for b in a:
            juzheng =[]
            juzheng.append(b[0])
            juzheng.append(b[1])
            self._grap_display(juzheng)
        juzheng = []
        juzheng.append(a[0][0])
        juzheng.append(a[0][1])
        self._grap_display(juzheng)
        t.mainloop()


if __name__ == '__main__':
    erwei().run_code()
